#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


typedef struct {
    int chave;
} item;

typedef struct NoArvoreAVL *PointeiroArvoreAVL;

typedef struct NoArvoreAVL {
    item elemento;
    PointeiroArvoreAVL direita;
    PointeiroArvoreAVL esquerda;
    int altura;
} NodeNoArvoreAVLTree;



void iniciaArvoreAVL(PointeiroArvoreAVL *node){
    (*node)=NULL;
}
bool estaVaziaArvoreAVL(PointeiroArvoreAVL *node){
    if((*node) == NULL){
        return true;

    }
}
void Pre_ordem(PointeiroArvoreAVL *node){
    if((*node) == NULL)return;
    printf("%d\n", ((*node)->elemento.chave));
    Pre_ordem(&(*node)->esquerda);
    Pre_ordem(&(*node)->direita);

}

void Pos_ordem(PointeiroArvoreAVL *node){
    if((*node) == NULL)return;
    Pos_ordem(&(*node)->esquerda);
    Pos_ordem(&(*node)->direita);
    printf("%d\n", (*node)->elemento.chave);
}

void Em_ordem(PointeiroArvoreAVL*node){
    if((*node) == NULL) return;
    Em_ordem(&(*node)->esquerda);
    printf("%d\n", (*node)->elemento.chave);
    Em_ordem(&(*node)->direita);
}
int alturaArvoreAVL(PointeiroArvoreAVL *node){
    if((*node) == NULL){
        return  0;
    }
    return (*node)->altura;
}
int atualizaAlturaArvoreAVL(PointeiroArvoreAVL *node){
    int ae , ad;
    ae=alturaArvoreAVL(&(*node)->esquerda);
    ad=alturaArvoreAVL(&(*node)->direita);

    if(ad-ae == 2 && ad-ae==-2){
        aplicarRotacoes();
    }
    return  true;
}
bool pesquisaArvoreAVL(PointeiroArvoreAVL *node, int elemento, item *porra){
    if((*node)== NULL){
        return false;
    }
    if((*node)->elemento.chave == elemento){
        *porra= (*node)->elemento;
        return true;
    }
    if((*node)->elemento.chave >elemento){
        return pesquisaArvoreAVL(&(*node)->esquerda, elemento, porra);
    }
    else{
        return pesquisaArvoreAVL(&(*node)->direita, elemento, porra);
    }
}
void rotacaoSimplesDireita(PointeiroArvoreAVL *node){
    PointeiroArvoreAVL u;
    u=(*node)->esquerda;
    (*node)->esquerda=u->direita;
    u->direita=(*node);
    (*node)->altura=0;
    (*node)=u;
}
void rotacaoSimplesEsquerda(PointeiroArvoreAVL *node){
    PointeiroArvoreAVL u;
    u=(*node)->direita;
    (*node)->direita=u->esquerda;
    u->esquerda=(*node);
    (*node)->altura=0;
    (*node)=u;
}

void rotacaoDuplaEsquerda(PointeiroArvoreAVL *node){
    PointeiroArvoreAVL u,v,p;
    u=(*node)->direita;
    v=u->esquerda;
    (*node)->direita=v->esquerda;
    u->esquerda=v->direita;
    v->direita=u;
    v->esquerda=(*node);
    (*node)=v;
}
void rotacaoDuplaDireita(PointeiroArvoreAVL *node){
    PointeiroArvoreAVL u,v;
    u=(*node)->esquerda;
    v=u->direita;
    u->direita=v->esquerda;
    v->esquerda=u;
    (*node)->esquerda=v->direita;
    v->direita=(*node);
    (*node)=v;
}
/*
void aplicarRotacoes(PointeiroArvoreAVL *node) {
    PointeiroArvoreAVL u;
    int he,hd;
    if(he > hd){
        rotacaoSimplesDireita(node);
        rotacaoDuplaDireita(node);
    }
    if(he(u)>hd(u)){
        rotacaoSimplesDireita(node);
    }
    else{
        rotacaoDuplaDireita(node);
    }
    if(he(u) > hd(u)){
        rotacaoSimplesEsquerda(node);
    }
    else{
        rotacaoDuplaEsquerda(node);
    }
}
*/
bool inserirArvoreAVL(PointeiroArvoreAVL *node, item *x){
    if((*node) == NULL){
        NodeNoArvoreAVLTree *no=(NodeNoArvoreAVLTree*)malloc(sizeof(NodeNoArvoreAVLTree));
        (*node)->direita=NULL;
        (*node)->esquerda=NULL;
        (*node)->altura=0;
        no=x;
        return true;
    }
    bool ok;
    if((*node)->elemento(x) == (*node)->elemento.chave){
        return false;
    }
    if(x.chave > (*node)->elemento.chave){
        ok=inserirArvoreAVL((*node)->direita,x);
    }
    else{
        ok=inserirArvoreAVL((*node)->esquerda,x);
    }
    if(ok ==false)return false;

    if(ok == true){
        aplicarRotacoes((*node));
    }
}
/*void destruirArvoreAVL(PointeiroArvoreAVL *node){
    if((*node == NULL))

        if((*node)->elemento == valor){
            if((*node)sub arvore esquerda == NULL){
                (*node)=(*node)->direita;
            }
        if(){

        }
    }
}
 */
void imprimeArvoreAVLNivel(PointeiroArvoreAVL *node);


int main(){

    inserirArvoreAVL();

    return 0;
}
